1.[{wp}.S.False = False
2.[{wp}.S.{Q} ^ {wp}.S.R = {wp}.S.{Q ^ R}
3.[{wp}.S.{Q} V {wp}.S.R = {wp}.S.{Q V R}
4.{wp}.skip.{Q} = {Q}
5.{wp}.(x:=E).{Q} = {Q}(x:=E)
6.{wp}.S;T.{Q} = {wp}.S.({wp}.T.{Q})
para demostrar if:
	1-[P-> B0 V ... V BN]
	2-[P ^ Bi -> wp.Si.Q]
	wp.if.{Q}=(B0 v ... v Bn) ^ (B0 -> wp.S0.{Q}) ^ ... ^ (Bn -> wp.Sn.{Q})
para demostrar do:
	Inicializacion:{P}S{I}
	Postcondicion:I ^ ¬B0 ^ ... ^ ¬Bn -> Q
	Invariante:{Bi ^ I}Si{I}
	Variante a:I ^ Bi -> v >= 0
	Variante b:{I ^ Bi ^ v = A}Si{v < A}



1-
	{wp} x := (x − y) ∗ (x + y) {(x + y^2 = 0)}
	={asignacion}
	((x - y) * (x + y) + y^2 = 0)
	={dif cuadrado}
	(x^2 - y^2 + y^2 = 0)
	={aritmetica}
	(x^2 = 0)
	={despejar x}
	(x=0)

	{wp}q, r := q + 1, r − y{q ∗ y + r = x}
	={asignacion}
	(q + 1) ∗ y + r - y = x
	={aritmetica}
	yq + y +r -y = x
	={aritmetica}
	yq + r = x

	{wp}
		a := a ≡ b;
		b := a ≡ b;
		a := a ≡ b;
		{ (a≡ B) ∧ (b≡ A) }
	={asignacion a}
	{wp} a := a ≡ b {((a ≡ (b))≡ B) ∧ (b≡ A)}
	={asignacion b}
	{wp} b := a ≡ b {((a ≡ (a ≡ b))≡ B) ∧ ((a ≡ b)≡ A)}
	={asignacion a}
	(((a ≡ b) ≡ ((a ≡ b) ≡ b))≡ B) ∧ (((a ≡ b) ≡ b)≡ A)
	={def neutro ≡}
	(b≡ B) ∧ (a≡ A)


2-
	{A = q ∗ B + r} q := E; r := r − B {A = q ∗ B + r}


	={def wp}
	wp. r := r − B . A = q ∗ B + r
	={sust r,def wp}
	wp.q := E. A = q ∗ B + r − B
	={sust q}
	A = E ∗ B + r − B
	={sust precond}
	q ∗ B + r = E ∗ B + r − B
	={aritmetica}
	E=q+1

	{x ∗ y + p ∗ q = N} x := x − p; q := E {x ∗ y + p ∗ q = N}
	={def wp}
	wp. q := E . x ∗ y + p ∗ q = N
	={sust q,def wp}
	wp. x := x − p . x ∗ y + p ∗ E = N
	={sust x}
	(x − p) ∗ y + p ∗ E = N
	={aritmetica}
	xy - py + pE = N
	={sust precond}
	xy - py + pE = xy + pq
	={despejo E}
	E= q + y


3-
	{x = A ∧ y = B}
		x := x - y;
		y := x + y;
		x := y - x;
	{x = B ∧ y = A}
	={def wp}
	wp. x := y - x . x = B ∧ y = A
	={sust x,def wp}
	wp. y := x + y . y - x = B ∧ y = A
	={sust y,def wp}
	wp. x := x - y . x + y - x = B ∧ x + y = A
	={sust x}
	x - y + y - (x - y) = B ∧ x - y + y = A
	={aritmetica}
	y=B ^ x=A


4-
	a-
		{True}
		if 
			x >= y -> skip
			[] x <= y -> x,y := y,x
		fi
		{x >= y}

		1-True -> x >= y V x <= y
			={Rango unitario}
		True -> x=y
		True
		2-
		True ^ x >= y -> wp.skip.{x >= y}
			={logica}
		x >= y -> wp.skip.{x >= y}
			={wp.skip.{Q}=Q}
		x >= y ->	x >= y
			={logica}
		True
		True ^ x <= y -> wp.x,y := y,x.{x >= y}
			={logica}
		x <= y -> wp.x,y := y,x.{x >= y}
			={def wp}
		x <= y -> y >= x
			={logica}
		True


	b-
		{True}
		x, y := y * y, x * x;
		if 
			x >= y -> x := x + 1
			[] x <= y -> y := y - x
		fi
		{x ≥ 0 ∧ y ≥ 0}

			={def wp}
		True -> wp.x, y := y * y, x * x.(wp.if.{x ≥ 0 ∧ y ≥ 0})

		wp.if.{x ≥ 0 ∧ y ≥ 0}
			={def wp if}
		(x >= y V x <= y) ^ (x >= y -> wp.x := x + 1.{x ≥ 0 ∧ y ≥ 0}) ^ (x <= y -> wp.y := y - x.{x ≥ 0 ∧ y ≥ 0})
			={Logica y aritmetica}
		True ^ (x >= y -> wp.x := x + 1.{x ≥ 0 ∧ y ≥ 0}) ^ (x <= y -> wp.y := y - x.{x ≥ 0 ∧ y ≥ 0})
			={def wp sub}
		True ^ (x >= y -> x + 1 ≥ 0 ∧ y ≥ 0) ^ (x <= y -> wp.y := y - x.{x ≥ 0 ∧ y ≥ 0})
			={aritmetica}
		True ^ True ^ (x <= y -> wp.y := y - x.{x ≥ 0 ∧ y ≥ 0})
			={def wp sust}
		True ^ True ^ x <= y -> x ≥ 0 ∧ y - x ≥ 0
			={aritmetica}
		True ^ True ^ True
			={Logica}
		True

		True -> wp.x, y := y * y, x * x.True
			={def wp sust}
		True -> True
			={Logica}
		True


	c-
		{True}
		if 
			¬a v b -> a := ¬a
			[] a v ¬b -> b := ¬b
		fi
		{a ∨ b}

		1-True-> ¬a v b v a v ¬b
			={asos V}
		True-> (¬a v a) v (b v ¬b)
			={tercero excluido}
		True-> True v True
			={idempotencia}
		True -> True
		True

		2-True ^ ¬a v b -> wp.a := ¬a.{a ∨ b}
			={Logica}
		¬a v b -> wp.a := ¬a.{a ∨ b}
			={def wp}
		¬a v b -> ¬a ∨ b
			={Logica}
		True
		True ^ a v ¬b -> wp.b := ¬b.{a ∨ b}
			={Logica}
		a v ¬b -> wp.b := ¬b.{a ∨ b}
			={def wp}
		a v ¬b -> a ∨ ¬b
			={Logica}
		True


	d-
		{N ≥ 0}
		x := 0
		do x <> N -> x := x + 1
		od
		{x = N}

		{I:N≥x}

		{V:N-x}

		Ini:{N ≥ 0}x := 0{N≥x}
			={def wp}
		N ≥ 0 -> wp.x := 0.{N≥x}
			={def wp}
		N ≥ 0 -> N≥0
			={Logica}
		True

		Pos:N≥x ^ ¬(x <> N)-> x = N
			={Logica}
		x=N ^ x = N-> x = N
			={Logica}
		True

		Inv:{x <> N ^ N≥x}x := x + 1{N≥x}
			={def wp}
		x <> N ^ N≥x -> wp.x := x + 1{N≥x}
			={def wp}
		x <> N ^ N≥x -> N≥x + 1
			={Logica}
		N>x -> N≥x + 1
			={aritmetica}
		N>x -> N-1≥x
			={aritmetica}
		N>x -> N>x
			={Logica}
		True
		

		Var a:N≥x ^ x <> N -> N-x >= 0
			={aritmetica}
		N≥x ^ x <> N -> N >= x
			={leibniz}
		True



		Var b:{N≥x ^ x <> N ^ N-x = A}x := x + 1{N-x < A}
			={def wp}
		N≥x ^ x <> N ^ N-x = A -> wp.x := x + 1.{N-x < A}
			={def wp}
		N≥x ^ x <> N ^ N-x = A -> N - x - 1 < A
			={aritmetica}
		N≥x ^ x <> N ^ N-x = A -> N - x < A + 1
			={Precondicion}
		N≥x ^ x <> N ^ N-x = A -> A < A + 1
			={Logica}
		N≥x ^ x <> N ^ N-x = A -> True
			={p -> True = True}
		True


5-
	El algoritmo compara el arreglo en capicua
	con N : Nat
	var n : Nat; r : Bool
	var A: array array:[0..N) of Nat
	{N > 0}
	n,r := 0, True
	-----{r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ 0 ≤ n ≤ N>}
	do n <> N
		n,r := n + 1, r ^ A.n = A.(N - n -1)
	od
	{r = <∀i : 0 ≤ i < N : A.i = A.(N − i − 1)>}

	{I=r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)> ∧ 0 ≤ n ≤ N}
	{V=N-n}

	Ini: {N > 0}.n,r := 0, True.{r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ 0 ≤ n ≤ N>}
		={def wp}
	N > 0 -> wp.n,r := 0, True.{r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ 0 ≤ n ≤ N>}
		={def wp sust}
	N > 0 -> True = <∀i : 0 ≤ i < 0 : A.i = A.(N − i − 1) ∧ 0 ≤ 0 ≤ N>
		={Rango vacio,neutro V}
	N > 0 -> True = True
		={Logica,p->True = True}
	True

	Pos:r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ 0 ≤ n ≤ N> ^ ¬(n <> N) -> r = <∀i : 0 ≤ i < N : A.i = A.(N − i − 1)>
		={Logica}
	r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ n = N -> r = <∀i : 0 ≤ i < N : A.i = A.(N − i − 1)>
		={susti}
	r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ n = N -> r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)>
		={Leibniz}
	True

	Invar:{n <> N ^ r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)> ∧ 0 ≤ n ≤ N}n,r := n + 1, r ^ A.n = A.(N - n -1){r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)> ∧ 0 ≤ n ≤ N}
		={def wp}
	n <> N ^ r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)> ∧ 0 ≤ n ≤ N -> wp.n,r := n + 1, r ^ A.n = A.(N - n -1).{r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)> ∧ 0 ≤ n ≤ N}
		={def wp sust}
	n <> N ^ r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)> ∧ 0 ≤ n ≤ N -> r ^ A.n = A.(N - n -1) = <∀i : 0 ≤ i < n + 1 : A.i = A.(N − i − 1)> ∧ 0 ≤ n + 1 ≤ N
		={particion de rango}
	n <> N ^ r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)> ∧ 0 ≤ n ≤ N -> r ^ A.n = A.(N - n -1) = <∀i : 0 ≤ i < n  : A.i = A.(N − i − 1)> ^ <∀i : i=n  : A.i = A.(N − i − 1)> ∧ 0 ≤ n + 1 ≤ N
		={Rango unitario}
	n <> N ^ r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)> ∧ 0 ≤ n ≤ N -> r ^ A.n = A.(N - n -1) = <∀i : 0 ≤ i < n  : A.i = A.(N − i − 1)> ^  A.n = A.(N − n − 1) ∧ 0 ≤ n + 1 ≤ N
		={sust}
	n <> N ^ r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)> ∧ 0 ≤ n ≤ N -> r ^ A.n = A.(N - n -1) = r ^  A.n = A.(N − n − 1) ∧ 0 ≤ n + 1 ≤ N
		={aritmetica}
	r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)> ∧ 0 ≤ n < N -> r ^ A.n = A.(N - n -1) = r ^  A.n = A.(N − n − 1) ∧ 0 ≤ n + 1 ≤ N
		={orden}
	r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)> ∧ 0 ≤ n < N -> r ^ A.n = A.(N - n -1) = r ^  A.n = A.(N − n − 1) ∧ True
		={Logica}
	r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)> ∧ 0 ≤ n < N -> True ∧ True
		={Logica}
	r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1)> ∧ 0 ≤ n < N -> True 
		={p->True=True}
	True

	Var a:r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ 0 ≤ n ≤ N> ^ n <> N -> N-n >= 0
		={arit}
	r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ 0 ≤ n ≤ N> ^ n<>N -> N >n V N=n
		={arit}
	r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ 0 ≤ n ≤ N> ^ n<>N ->True
		={p->True = True}
	True


	Var b:{r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ 0 ≤ n ≤ N> ^ n <> N ^ N-n = A}n,r := n + 1, r ^ A.n = A.(N - n -1){N-n < A}
		={def wp}
	r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ 0 ≤ n ≤ N> ^ n <> N ^ N-n = A ->wp.n,r := n + 1, r ^ A.n = A.(N - n -1).{N-n < A}
		={def wp sust}
	r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ 0 ≤ n ≤ N> ^ n <> N ^ N-n = A ->N-n-1 < A
		={arit}
	r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ 0 ≤ n ≤ N> ^ n <> N ^ N-n = A ->N-n< A + 1
		={sust precondicion}
	r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ 0 ≤ n ≤ N> ^ n <> N ^ N-n = A ->A< A + 1
		={aritmetica}
	r = <∀i : 0 ≤ i < n : A.i = A.(N − i − 1) ∧ 0 ≤ n ≤ N> ^ n <> N ^ N-n = A ->True
		={p->True=True}
	True






if a ≥ b -> a:=a−b ;
[ ] b ≥ a -> b:=b−a ;
fi
{a > 0 ∧ b > 0}

wp.if.{a > 0 ∧ b > 0}
	={def wp if}
(a ≥ b v b ≥ a) ^ (a ≥ b -> wp.a:=a−b.{a > 0 ∧ b > 0}) ^ (b ≥ a -> wp.b:=b−a.{a > 0 ∧ b > 0})
	={Aritmetica}
True ^ (a ≥ b -> wp.a:=a−b.{a > 0 ∧ b > 0}) ^ (b ≥ a -> wp.b:=b−a.{a > 0 ∧ b > 0})
	={def wp sust}
True ^ (a ≥ b -> a−b > 0 ∧ b > 0) ^ (b ≥ a -> wp.b:=b−a.{a > 0 ∧ b > 0})
	={Aritmetica}
True ^ True ^ (b ≥ a -> wp.b:=b−a.{a > 0 ∧ b > 0})
	={def wp sust}
True ^ True ^ (b ≥ a -> a > 0 ∧ b−a > 0)
	={Aritmetica}
True ^ True ^ True
	={Logica}
True



{P}.Skip;Skip.{Q}
		={def wp}
P->wp.Skip;Skip.{Q}
		={def wp comp}
P->wp.Skip.(wp.Skip.{Q})
		={def wp.skip.{Q} = {Q}}
P->wp.Skip.{Q}
		={def wp.skip.{Q} = {Q}}
{Q}

{P}.Skip.{Q}
		={def wp.skip.{Q} = {Q}}
{Q}

Skip;Skip=Skip


var i , k : int ;
cons N: int ;
array b [0,N) of int ;
{N > 0}
i , k := 1 , 0 ;
do i < N ∧ b[i] ≤ b[k] → i := i +1
[ ] i < N ∧ b[i] ≥ b[k] → k , i := i , i := i +1
od
{∀j : 0 ≤ j < N : b[k] ≥ b[j]}


var x , y : int ;
{x>0 ^ y>0}
a=a+b;
b=a-b;
a=a-b;
